{"version":3,"sources":["components/App/twitter_logo.svg","components/TotalsLabel/TotalsLabel.js","components/ReviewCard/ReviewCard.js","components/Reviews/Reviews.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TotalsLabel","n","toLocaleString","reviews","this","localizeNum","props","num_reviews","className","loading","Component","ReviewCard","stars","rating","parseInt","s","i","push","size","color","key","Title","date","moment","format","data","border","Body","starRating","style","title","Text","review","author","formatDate","iso","Reviews","state","today","Date","setHours","length","last_month","handleClick","bind","setState","prevProps","r","reduce","arr","review_date","label","getDateLabel","rev_date","Math","round","abs","isSame","subtract","isBefore","year","url","keyword","page","fetch","method","then","resp","json","joined","concat","catch","err","console","log","groupByDate","Object","keys","map","variant","id","renderReviews","renderError","block","disabled","animation","onClick","e","handler","App","pages","handleSubmit","handleChange","getReviews","persist","target","value","name","preventDefault","total","width","height","src","logo","alt","fluid","rounded","onSubmit","Row","Label","Control","onChange","placeholder","as","renderLoading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,0C,gUC6B5BC,E,oLArBDC,GACV,OAAOA,EAAEC,mB,+BAIT,IAAIC,EAAUC,KAAKC,YAAYD,KAAKE,MAAMC,aAE1C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,yBAAKC,UAAU,qBACZJ,KAAKE,MAAMG,QAAU,GAAK,4BAAI,2BAAOD,UAAU,yBAAjB,WAAkDL,EAAlD,qB,GAfjBO,a,4FCgDXC,E,mLAzCFC,GAIT,IAHA,IAAMC,EAASC,SAASF,EAAO,IACzBG,EAAI,GAEDC,EAAE,EAAGA,EAAE,EAAGA,IACbA,EAAIH,EACNE,EAAEE,KAAK,kBAAC,IAAD,CAAQC,KAAK,SAASC,MAAM,UAAUC,IAAKJ,KAElDD,EAAEE,KAAK,kBAAC,IAAD,CAAQC,KAAK,SAASC,MAAM,UAAUC,IAAKJ,KAGtD,OACE,kBAAC,IAAKK,MAAN,KAAaN,K,iCAINO,GACT,OAAOC,IAAOD,GAAME,OAAO,U,+BAI3B,IAAMC,EAAOrB,KAAKE,MAAMmB,KACxB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMjB,UAAU,kCAAkCkB,OAAO,WACvD,kBAAC,IAAKC,KAAN,KACGvB,KAAKwB,WAAWH,EAAKb,OACtB,kBAAC,IAAKS,MAAN,CAAYQ,MAAO,CAACV,MAAO,WAAYX,UAAU,QAAO,gCAASiB,EAAKK,QACtE,kBAAC,IAAKC,KAAN,KAAYN,EAAKO,QACjB,2BAAOxB,UAAU,mBAAjB,aAA0CiB,EAAKQ,OAA/C,eAA4D7B,KAAK8B,WAAWT,EAAKH,OAAjF,mBAA8GG,EAAKU,IAAnH,c,GAlCSzB,aCuKV0B,E,YA9Jb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KAED+B,MAAQ,CACXC,OAAO,IAAIC,MAAOC,SAAS,EAAG,EAAG,EAAG,GACpC/B,SAAS,EACTN,QAAS,GACTsC,OAAQ,EAAKnC,MAAMH,QAAQsC,OAC3BC,YAAY,IAAIH,MAAOC,SAAS,EAAG,EAAG,EAAG,IAG3C,EAAKG,YAAc,EAAKA,YAAYC,KAAjB,gBAXF,E,iFAejBxC,KAAKyC,SAAS,CAAE1C,QAASC,KAAKE,MAAMH,Y,yCAInB2C,GACdA,EAAUvC,cAAgBH,KAAKE,MAAMC,aACtCH,KAAKyC,SAAS,CAAE1C,QAASC,KAAKE,MAAMH,Y,kCAW5B4C,GAAI,IAAD,OAiBb,OAhBgBA,EAAEC,QAAO,SAACC,EAAKjC,GAC7B,IAAIkC,EAAc,IAAIX,KAAKvB,EAAEM,MAAMkB,SAAS,EAAG,EAAG,EAAG,GAGrD,GAFIS,EAAG,QAAWA,EAAG,MAAa,IAE/BC,IAAgB,EAAKb,MAAMC,MAG5B,OAFAW,EAAG,MAAUhC,KAAKD,GAEXiC,EAEP,IAAIE,EAAQ,EAAKC,aAAaF,GAI9B,OAHID,EAAIE,KAAQF,EAAIE,GAAS,IAC7BF,EAAIE,GAAOlC,KAAKD,GAETiC,IAER,M,mCAUQI,GACX,IACMf,EAAQ,IAAIC,KAAKnC,KAAKiC,MAAMC,OAC5BY,EAAc,IAAIX,KAAKc,GAI7B,OAAiB,IAFFC,KAAKC,MAAMD,KAAKE,IAAKlB,EAAQY,GAJ5B,OAOP,YACE3B,IAAO2B,GAAaO,OAAOnB,EAAO,WACpC,YACEf,IAAOe,GAAOoB,SAAS,EAAG,WAAWD,OAAOP,EAAa,WAC3D,YACE3B,IAAOe,GAAOmB,OAAOP,EAAa,SACpC,aACE3B,IAAOe,GAAOoB,SAAS,EAAG,SAASD,OAAOP,EAAa,SACzD,aACE3B,IAAO2B,GAAaS,SAASrB,EAAO,SACvC,GAAN,OAAUf,IAAO2B,GAAa1B,OAAO,QAArC,YAAgDD,IAAO2B,GAAaU,aAD/D,I,oCAMM,IAAD,OACNC,EAAG,2DAAuDzD,KAAKE,MAAMwD,QAAlE,kBAAmF1D,KAAKE,MAAMO,OAA9F,iBAA6GT,KAAKE,MAAMyD,KAAxH,eAET3D,KAAKyC,SAAS,CACZpC,SAAS,IAGXuD,MAAMH,EAAK,CAAEI,OAAQ,QACpBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAzC,GACJ,IAAI4C,EAAS,EAAKhC,MAAMlC,QAAQmE,OAAO7C,EAAKtB,SAC5C,EAAK0C,SAAS,CACZ1C,QAASkE,EACT5D,SAAS,OAGZ8D,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,oCAMd,OAAkC,IAA9BpE,KAAKiC,MAAMlC,QAAQsC,OAEnB,wBAAIjC,UAAU,uBAAd,yBAA2DJ,KAAKE,MAAMwD,QAAtE,KAIA,wBAAItD,UAAU,sBAAd,6B,sCAOJ,IAAMuC,EAAI3C,KAAKuE,YAAYvE,KAAKiC,MAAMlC,SAChCA,EAAUyE,OAAOC,KAAK9B,GAAG+B,KAAI,SAAC1D,GAAD,OACjC,yBAAKA,IAAKA,GACW,IAAlB2B,EAAE3B,GAAKqB,OAAe,GAAK,kBAAC,IAAD,CAAOjC,UAAU,YAAYuE,QAAQ,uBAAsB,wBAAIvE,UAAU,QAAQY,IAE5G2B,EAAE3B,GAAK0D,KAAI,SAAC9D,GAAD,OAAS,kBAAC,EAAD,CAAYI,IAAKJ,EAAEgE,GAAIvD,KAAMT,WAItD,OACE,kBAAC,IAAD,KACGb,K,+BAKG,IAAD,OACP,OACE,kBAAC,IAAD,CAAWiB,IAAKhB,KAAKE,MAAMC,aACvBH,KAAKiC,MAAMlC,QAAQsC,OAAS,EAAIrC,KAAK6E,gBAAkB7E,KAAK8E,cAE5D9E,KAAKE,MAAMC,aAAgBH,KAAKiC,MAAMlC,QAAQsC,OAAU,GACxD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAejC,UAAU,+BAErBJ,KAAKiC,MAAM5B,QAAU,kBAAC,IAAD,CAAQsE,QAAQ,UAAUI,OAAK,EAACC,UAAQ,GAC3D,kBAAC,IAAD,CAASC,UAAU,SAASnE,KAAK,QAGnC,kBAAC,IAAD,CAAQoE,QAAS,SAACC,GAAO,EAAKjF,MAAMkF,UAAW,EAAK7C,eAAgBoC,QAAQ,UAAUI,OAAK,GAA3F,qB,GApJMzE,aCiJP+E,E,YApJb,WAAYnF,GAAQ,IAAD,8BACjB,4CAAMA,KAED+B,MAAQ,CACX0B,KAAM,EACN2B,MAAO,GACPjF,SAAS,EACTqD,QAAS,GACTjD,OAAQ,YACRN,YAAa,EACbJ,QAAS,IAGX,EAAKwF,aAAe,EAAKA,aAAa/C,KAAlB,gBACpB,EAAKgD,aAAe,EAAKA,aAAahD,KAAlB,gBACpB,EAAK4C,QAAU,EAAKA,QAAQ5C,KAAb,gBAfE,E,iFAoBjBxC,KAAKyF,e,mCAIMN,GAAG,IAAD,SACbA,EAAEO,UACFrB,QAAQC,IAAIa,EAAEQ,OAAOC,OACrB5F,KAAKyC,UAAL,mBAAiB0C,EAAEQ,OAAOE,KAAOV,EAAEQ,OAAOC,OAA1C,qBAAuD,GAAvD,IAA4D,WAC1D,EAAKL,aAAaJ,Q,gCAKpBnF,KAAKyC,SAAS,CAAEkB,KAAM3D,KAAKiC,MAAM0B,KAAO,M,mCAI7BwB,GACXA,EAAEW,iBACF9F,KAAKyF,e,mCAKO,IAAD,OACL/B,EAAU1D,KAAKiC,MAAMyB,QACrBjD,EAAST,KAAKiC,MAAMxB,OACpBgD,EAAG,2DAAuDC,EAAvD,kBAAwEjD,EAAxE,eAETT,KAAKyC,SAAS,CACZpC,SAAS,IAGXuD,MAAMH,EAAK,CAAEI,OAAQ,QACpBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAzC,GACJgD,QAAQC,IAAIjD,GACZ,EAAKoB,SAAS,CACZ1C,QAASsB,EAAKtB,QACdI,YAAakB,EAAK0E,MAClB1F,SAAS,EACTsD,KAAM,EAAK1B,MAAM0B,KAAO,EACxB2B,MAAOjE,EAAKiE,WAGfnB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,sCAKd,OACE,kBAAC,IAAD,CAAWhE,UAAU,mBACnB,kBAAC,IAAD,CAAS6E,UAAU,SAASN,QAAQ,UAAUlD,MAAO,CAACuE,MAAO,WAAYC,OAAQ,iB,sCAMrF,OACE,kBAAC,EAAD,CACAlG,QAASC,KAAKiC,MAAMlC,QACpBI,YAAaH,KAAKiC,MAAM9B,YACxBuD,QAAS1D,KAAKiC,MAAMyB,QACpBjD,OAAQT,KAAKiC,MAAMxB,OACnBkD,KAAM3D,KAAKiC,MAAM0B,KACjB2B,MAAOtF,KAAKiC,MAAMqD,MAClBF,QAASpF,KAAKoF,Y,+BAMhB,OACE,yBAAKhF,UAAU,OAEb,kBAAC,IAAD,CAAWA,UAAU,OACnB,kBAAC,IAAD,CAAKA,UAAU,0BACb,kBAAC,IAAD,CAAKA,UAAU,wBACX,kBAAC,IAAD,CACE4F,MAAM,MACNC,OAAO,MACPC,IAAKC,IACLC,IAAI,OACJC,OAAK,EACLC,SAAO,KAGb,kBAAC,IAAD,CAAKlG,UAAU,gCACb,wBAAIA,UAAU,YAAd,0BAMN,kBAAC,IAAD,CAAWA,UAAU,OACnB,kBAAC,IAAD,CAAMmG,SAAUvG,KAAKuF,cACnB,kBAAC,IAAKiB,IAAN,KACE,kBAAC,IAAD,CAAKpG,UAAU,YACb,kBAAC,IAAKqG,MAAN,2BACA,kBAAC,IAAKC,QAAN,CAAcb,KAAK,UAAUc,SAAU3G,KAAKwF,aAAcoB,YAAY,gBAAgBhB,MAAO5F,KAAKiC,MAAMyB,WAE1G,kBAAC,IAAD,CAAKtD,UAAU,YACb,kBAAC,IAAKqG,MAAN,0BACA,kBAAC,IAAKC,QAAN,CAAcG,GAAG,SAAShB,KAAK,SAASc,SAAU3G,KAAKwF,aAAcI,MAAO5F,KAAKiC,MAAMxB,QACrF,4BAAQmF,MAAO,aAAf,eACA,4BAAQA,MAAM,KAAd,IAAoB,KAApB,UACA,4BAAQA,MAAM,KAAd,IAAoB,KAApB,gBACA,4BAAQA,MAAM,KAAd,IAAoB,KAApB,sBACA,4BAAQA,MAAM,KAAd,IAAoB,KAApB,4BACA,4BAAQA,MAAM,KAAd,IAAoB,KAApB,uCAQV,kBAAC,EAAD,CAAavF,QAASL,KAAKiC,MAAM5B,QAASF,YAAaH,KAAKiC,MAAM9B,cAGjEH,KAAKiC,MAAM5B,QAAUL,KAAK8G,gBAAkB9G,KAAK6E,qB,GA9IxCvE,aCDEyG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.e67f6214.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter_logo.d00ce219.svg\";","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass TotalsLabel extends Component {\r\n\r\n  // Formatting the number into something easier on the eyes\r\n  localizeNum(n) {\r\n    return n.toLocaleString();\r\n  }\r\n\r\n  render() {\r\n    let reviews = this.localizeNum(this.props.num_reviews);\r\n\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n          <div className=\"totals-label mb-4\">\r\n            {this.props.loading ? \"\" : <h6><small className=\"text-muted fadeInLeft\">Showing {reviews} reviews</small></h6>}\r\n          </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TotalsLabel;\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { FaStar } from 'react-icons/fa';\r\nimport moment from 'moment';\r\n\r\n// Very basic review card to display review details as requested\r\nclass ReviewCard extends Component {\r\n\r\n  // Transforms the float rating from API into cool stars\r\n  starRating(stars) {\r\n    const rating = parseInt(stars, 10);\r\n    const s = [];\r\n\r\n    for (let i=0; i<5; i++) {\r\n      if (i < rating) {\r\n        s.push(<FaStar size=\"2.25em\" color=\"#1DA1F2\" key={i}/>)\r\n      } else {\r\n        s.push(<FaStar size=\"2.25em\" color=\"#E1E8ED\" key={i}/>)\r\n      }\r\n    }\r\n    return (\r\n      <Card.Title>{s}</Card.Title>\r\n    )\r\n  }\r\n\r\n  formatDate(date) {\r\n    return moment(date).format(\"LLLL\");\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"shadow-sm mb-4 fadeInUp rounded\" border=\"primary\">\r\n              <Card.Body>\r\n                {this.starRating(data.stars)}\r\n                <Card.Title style={{color: \"#1DA1F2\"}} className=\"mb-3\"><strong>{data.title}</strong></Card.Title>\r\n                <Card.Text>{data.review}</Card.Text>\r\n                <small className=\"text-muted mt-1\">{`By ${data.author} on ${this.formatDate(data.date)}`} &nbsp;&bull;&nbsp; {data.iso} </small>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReviewCard;\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment'\r\nimport Container from 'react-bootstrap/Container';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport ReviewCard from '../ReviewCard/ReviewCard';\r\n\r\n/*\r\n  Reviews are stateful inside this child to paginate additional reviews. Certainly one way to do them, \r\n  I had originally just used App.js to parse and group reviews by date for labeling, but I decided to break\r\n  the project into several moving pieces\r\n*/\r\n\r\nclass Reviews extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      today: new Date().setHours(0, 0, 0, 0),\r\n      loading: false,\r\n      reviews: [],\r\n      length: this.props.reviews.length,\r\n      last_month: new Date().setHours(0, 0, 0, 0)\r\n    }\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ reviews: this.props.reviews })\r\n  }\r\n\r\n  // Handle a few race condition cases ( User vs AppFigures API)\r\n  componentDidUpdate(prevProps) {\r\n    if(prevProps.num_reviews !== this.props.num_reviews) {\r\n      this.setState({ reviews: this.props.reviews})\r\n    }\r\n  }\r\n\r\n  /*\r\n    2) Search results grouped by date\r\n    Creates as many groups per new date(s) as needed\r\n\r\n    ptype = Array of reviews\r\n    rtype = Object containing N key-val pairs of size N arrays\r\n  */\r\n  groupByDate(r) {\r\n    const grouped = r.reduce((arr, i) => {\r\n      let review_date = new Date(i.date).setHours(0, 0, 0, 0);\r\n      if(!arr[\"Today\"]) arr[\"Today\"] =  [];\r\n\r\n      if(review_date === this.state.today) {\r\n        arr[\"Today\"].push(i);\r\n\r\n        return arr;\r\n      } else {\r\n        let label = this.getDateLabel(review_date);\r\n        if(!arr[label]) arr[label] = [];\r\n        arr[label].push(i);\r\n\r\n        return arr;\r\n      }\r\n    }, {});\r\n    return grouped;\r\n  }\r\n\r\n  /*\r\n    Moment.js does the heavy lift for date comparison here\r\n\r\n    ptype = Date Object\r\n    rtype = String\r\n  */\r\n  getDateLabel(rev_date) {\r\n    const one_day = 86400000;\r\n    const today = new Date(this.state.today);\r\n    const review_date = new Date(rev_date);\r\n    \r\n    let distance = Math.round(Math.abs((today - review_date)) / one_day);\r\n    \r\n    if (distance === 1) {\r\n      return \"Yesterday\";\r\n    } else if (moment(review_date).isSame(today, \"isoWeek\")) {\r\n      return \"This week\";\r\n    } else if (moment(today).subtract(1, 'isoWeek').isSame(review_date, \"isoWeek\")) {\r\n      return \"Last week\";\r\n    } else if (moment(today).isSame(review_date, \"month\")) {\r\n      return \"This month\";\r\n    } else if (moment(today).subtract(1, 'month').isSame(review_date, \"month\")) {\r\n      return \"Last month\";\r\n    } else if (moment(review_date).isBefore(today, \"month\")) {\r\n      return `${moment(review_date).format(\"MMMM\")} ${moment(review_date).year()}`;\r\n    }\r\n  }\r\n\r\n  // For pagination functionality\r\n  handleClick() {\r\n    const url = `https://appfigures.com/_u/jobs/twitter-reviews?q=${this.props.keyword}&stars=${this.props.rating}&page=${this.props.page}&sort=-date`;\r\n\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    fetch(url, { method: 'GET' })\r\n    .then(resp => resp.json())\r\n    .then(data => {\r\n      let joined = this.state.reviews.concat(data.reviews);\r\n      this.setState({\r\n        reviews: joined,\r\n        loading: false\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  // Handle and show user error with some details.\r\n  renderError() {\r\n    if (this.state.reviews.length === 0) {\r\n      return(\r\n        <h3 className=\"alert alert-warning\">No reviews found for \"{this.props.keyword}\"</h3>\r\n      )\r\n    } else {\r\n      return(\r\n        <h3 className=\"alert alert-danger\">Error fetching reviews!</h3>\r\n      )\r\n    }\r\n  }\r\n\r\n  // Reviews are grouped and then each group is iterated over and rendered into view\r\n  renderReviews() {\r\n    const r = this.groupByDate(this.state.reviews);\r\n    const reviews = Object.keys(r).map((key) => (\r\n      <div key={key}>\r\n        {r[key].length === 0 ? \"\" : <Alert className=\"shadow-sm\" variant=\"primary text-center\"><h4 className=\"mb-0\">{key}</h4></Alert>}\r\n        \r\n        {r[key].map((i) => ( <ReviewCard key={i.id} data={i} /> ))}\r\n      </div>\r\n    ));\r\n\r\n    return(\r\n      <Container>\r\n        {reviews}\r\n      </Container>\r\n    )\r\n  }\r\n\r\n  render() {// Main render function\r\n    return (\r\n      <Container key={this.props.num_reviews}>\r\n        { this.state.reviews.length > 0 ? this.renderReviews() : this.renderError() }\r\n        { // pagination handled below, with conditions for no pages available and loading feedback\r\n          this.props.num_reviews <= (this.state.reviews.length) ? \"\" : \r\n          <Row>\r\n            <Col>\r\n            <ButtonToolbar className=\"justify-content-center mb-4\">\r\n              {\r\n                this.state.loading ? <Button variant=\"primary\" block disabled>\r\n                  <Spinner animation=\"border\" size=\"sm\"></Spinner>\r\n                </Button>\r\n                : \r\n                <Button onClick={(e) => {this.props.handler(); this.handleClick()}} variant=\"primary\" block>Load more</Button>\r\n              }\r\n            </ButtonToolbar>\r\n            </Col>\r\n          </Row>\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Reviews;\r\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport logo from './twitter_logo.svg';\n\nimport TotalsLabel from '../TotalsLabel/TotalsLabel';\nimport Reviews from '../Reviews/Reviews';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      page: 1,\n      pages: \"\",\n      loading: false,\n      keyword: \"\",\n      rating: \"1,2,3,4,5\",\n      num_reviews: 0,\n      reviews: []\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handler = this.handler.bind(this)\n  }\n\n  // Load reviews as soon as possible\n  componentDidMount() {\n    this.getReviews();\n  }\n\n  // Asynchronous so my API call is made with the intended keyword state for filtering.\n  handleChange(e){\n    e.persist();\n    console.log(e.target.value)\n    this.setState({ [e.target.name]: e.target.value, page: 1 }, () => {\n      this.handleSubmit(e);\n    });\n  }\n\n  handler() {\n    this.setState({ page: this.state.page + 1})\n  }\n\n  // Called within handleChange to invoke a search and immediately reflect changes made by user searches\n  handleSubmit(e) {\n    e.preventDefault();\n    this.getReviews();\n    // console.log(`Keyword(s): ${this.state.keyword}\\nRating: ${this.state.rating}`);\n  }\n\n  // GET Request made to AppFigures API\n  getReviews() {\n    const keyword = this.state.keyword;\n    const rating = this.state.rating;\n    const url = `https://appfigures.com/_u/jobs/twitter-reviews?q=${keyword}&stars=${rating}&sort=-date`;\n\n    this.setState({\n      loading: true\n    });\n\n    fetch(url, { method: 'GET' })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data);\n      this.setState({\n        reviews: data.reviews,\n        num_reviews: data.total,\n        loading: false,\n        page: this.state.page + 1,\n        pages: data.pages\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  renderLoading() {\n    return(\n      <Container className=\"p-5 text-center\">\n        <Spinner animation=\"border\" variant=\"primary\" style={{width: \"3.375rem\", height: \"3.375rem\"}}/>\n      </Container>\n    )\n  }\n\n  renderReviews() {\n    return(\n      <Reviews\n      reviews={this.state.reviews}\n      num_reviews={this.state.num_reviews}\n      keyword={this.state.keyword}\n      rating={this.state.rating}\n      page={this.state.page}\n      pages={this.state.pages} \n      handler={this.handler}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {/* The entirety of the following Container is just for the twt logo and text to the right of it */}\n        <Container className=\"p-3\">\n          <Row className=\"justify-content-center\">\n            <Col className=\"col-auto text-center\">\n                <Image\n                  width=\"80%\"\n                  height=\"80%\"\n                  src={logo} \n                  alt=\"Logo\"\n                  fluid\n                  rounded\n                />\n            </Col>\n            <Col className=\"col-xs-9 text-center my-auto\">\n              <h1 className=\"app_name\">Reviews for Twitter</h1>\n            </Col>\n          </Row>\n        </Container>\n\n        {/* 1) Search & filter by rating */}\n        <Container className=\"p-3\">\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Row>\n              <Col className=\"col-md-8\">\n                <Form.Label>Filter by keyword:</Form.Label>\n                <Form.Control name=\"keyword\" onChange={this.handleChange} placeholder=\"Enter keyword\" value={this.state.keyword}/>\n              </Col>\n              <Col className=\"col-md-4\">\n                <Form.Label>Filter by rating:</Form.Label>\n                <Form.Control as=\"select\" name=\"rating\" onChange={this.handleChange} value={this.state.rating}>\n                  <option value={\"1,2,3,4,5\"}>All Ratings</option>\n                  <option value=\"1\">1{\"\\t\"}&#xf005;</option>\n                  <option value=\"2\">2{\"\\t\"}&#xf005;&#xf005;</option>\n                  <option value=\"3\">3{\"\\t\"}&#xf005;&#xf005;&#xf005;</option>\n                  <option value=\"4\">4{\"\\t\"}&#xf005;&#xf005;&#xf005;&#xf005;</option>\n                  <option value=\"5\">5{\"\\t\"}&#xf005;&#xf005;&#xf005;&#xf005;&#xf005;</option>\n                </Form.Control>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n        \n        {/* 2) Totals label */}\n        <TotalsLabel loading={this.state.loading} num_reviews={this.state.num_reviews}/>\n\n        {/* 3, 4, and 5 of the specs listed are handled within these functions and their children*/}\n        {this.state.loading ? this.renderLoading() : this.renderReviews() }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}