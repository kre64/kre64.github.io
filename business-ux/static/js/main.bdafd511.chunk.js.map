{"version":3,"sources":["components/Accounts/AccountList.js","components/Accounts/Accounts.js","components/Balances/Balances.js","components/Transactions/Transactions.js","components/App/App.js","index.js"],"names":["AccountList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","accounts","fakeAccounts","index","handleListItemClick","bind","assertThisInitialized","e","setState","date","formattedDate","Date","isNaN","getTime","getMonth","getDate","getFullYear","_this2","accountsList","account","map","acc","i","react_default","a","createElement","ListItem","key","accountName","button","divider","selected","onClick","ListItemIcon","CreditCard_default","ListItemText","primary","Fragment","Typography","variant","accountNumber","secondary","displayedName","ListItemSecondaryAction","formatDate","createdDate","Paper","List","dense","Grid","item","xs","renderAccountList","Component","Accounts","m","month","d","container","justify","id","direction","Box","gutterBottom","align","accountType","balance","currency","amount","availableBalance","concat","Math","abs","renderAcc","Balances","data","daily","value","recent","monthly","handleChange","processData","daily_labels","j","name","daily_values","amt","month_labels","average","month_average_values","day_of_week_labels","day","daily_average","day_of_week_average_values","newValue","es6","width","height","margin","top","right","left","bottom","dataKey","dy","strokeDasharray","stroke","type","barSize","fill","x1","y1","x2","y2","offset","stopColor","stopOpacity","fillOpacity","AppBar","position","color","Tabs","onChange","Tab","label","renderRecent","renderDaily","renderMonthly","renderTabs","Transactions","trxs","rowsPerPage","emptyRows","page","count","trxs_count","transaction","TOTAL","handleChangePage","handleChangeRowsPerPage","newPage","parseInt","target","min","trxRows","slice","trx","TableRow","hover","TableCell","category","baseType","runningBalance","Table","style","TableHead","TableBody","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","aria-label","native","onChangePage","onChangeRowsPerPage","overflowX","trxsTable","App","isLoading","error","fetch","then","resp","ok","json","Error","console","log","catch","err","theme","createMuiTheme","palette","main","background","events","successColor","warningColor","warningLight","weak","moderate","good","strong","typography","fontColorLight","fontColorLightened","fontWeightHeavy","fontWeightNormal","fontWeightLight","fontFamily","MuiThemeProvider","spacing","Accounts_AccountList","includeInNetWorth","currentBalance","isManual","accountStatus","lastUpdated","isAsset","providerId","providerAccountId","CONTAINER","components_Accounts_Accounts","components_Balances_Balances","balances","components_Transactions_Transactions","className","renderApp","renderError","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.bdafd511.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nclass AccountList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            accounts: this.props.accounts,\r\n            fakeAccounts: this.props.fakeAccounts,\r\n            index: 0\r\n        }\r\n\r\n        this.handleListItemClick = this.handleListItemClick.bind(this);\r\n    }\r\n\r\n    handleListItemClick(e, index) {\r\n        this.setState({\r\n            index: index\r\n        });\r\n    }\r\n\r\n    formatDate(date) {\r\n        let formattedDate = new Date(date);\r\n        if (!isNaN(formattedDate.getTime())) {\r\n            return formattedDate.getMonth() + 1 + '/' + formattedDate.getDate() + '/' + formattedDate.getFullYear();\r\n        }\r\n    }\r\n\r\n    // Renders the data for selected account.\r\n    renderAccountList() {\r\n        const accountsList = this.state.fakeAccounts.account.map((acc, i) =>\r\n            <ListItem \r\n                key={acc.accountName}\r\n                button\r\n                divider\r\n                selected={this.state.index === i}\r\n                onClick={e => this.handleListItemClick(e, i)}\r\n            >\r\n                <ListItemIcon>\r\n                    <CreditCardIcon />\r\n                </ListItemIcon>\r\n                <ListItemText \r\n                    primary={\r\n                        <React.Fragment>\r\n                            {acc.accountName}\r\n                            <Typography\r\n                                variant=\"caption\"\r\n                            >\r\n                                &nbsp;({acc.accountNumber})\r\n                            </Typography>\r\n                        </React.Fragment>\r\n                    }\r\n                    secondary={acc.displayedName}\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <Typography variant=\"body2\">\r\n                        {this.formatDate(acc.createdDate)}\r\n                    </Typography>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        );\r\n        return (\r\n            <Paper>\r\n                <List dense>\r\n                    {accountsList}\r\n                </List>\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs>\r\n                {this.renderAccountList()}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountList;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nclass Accounts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            accounts: this.props.accounts\r\n        }\r\n    }\r\n\r\n    formatDate(date) {\r\n        let formattedDate = new Date(date);\r\n        if (!isNaN(formattedDate.getTime())) {\r\n            let m = formattedDate.getMonth() + 1;\r\n            let month = m < 10 ? '0'+m : m;\r\n\r\n            let d = formattedDate.getDate();\r\n            let day = d < 10 ? '0'+d : d;\r\n            return month + '/' + day + '/' + formattedDate.getFullYear();\r\n        }\r\n    }\r\n\r\n    // Renders the data for selected account.\r\n    renderAcc() {\r\n        const accounts = this.state.accounts.account.map((acc) =>\r\n            <Grid container justify=\"space-evenly\" key={acc.id}>\r\n                <Grid item xs={8} container direction=\"column\">\r\n                    <Box m={1}>\r\n                        <Typography gutterBottom variant=\"h5\">\r\n                            {acc.accountName}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"body1\">\r\n                            {acc.displayedName}\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4} container direction=\"column\">\r\n                    <Box m={1}>\r\n                        <Typography align=\"right\" gutterBottom variant=\"body2\">\r\n                            {acc.accountType} {acc.accountNumber}\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4} container direction=\"row\">\r\n                    <Box m={1}>\r\n                        <Typography gutterBottom variant=\"h5\" align=\"center\">\r\n                            Current Balance\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h6\" align=\"center\">\r\n                            {acc.balance.currency === \"USD\" ? '$' : ''}\r\n                            {acc.balance.amount}\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4} container direction=\"column\">\r\n                    <Box m={1}>\r\n                        <Typography gutterBottom variant=\"h5\" align=\"center\">\r\n                            Available Balance\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h6\" align=\"center\">\r\n                            {acc.availableBalance.amount < 0 ? `-$${Math.abs(acc.availableBalance.amount)}` : acc.availableBalance.amount }\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n        return (\r\n            <Paper>\r\n                {accounts}\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs={12}>\r\n                {this.renderAcc()}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Accounts;","import React, { Component } from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Line,\r\nArea, AreaChart, ComposedChart, Legend, Bar } from 'recharts';\r\n\r\nclass Balances extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: this.props.daily,\r\n            value: 0,\r\n            recent: [],\r\n            monthly: [],\r\n            daily: [],\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.processData()\r\n    }\r\n\r\n    formatDate(date) {\r\n        let formattedDate = new Date(date);\r\n        if (!isNaN(formattedDate.getTime())) {\r\n            return formattedDate.getMonth() + 1 + '/' + formattedDate.getDate() + '/' + formattedDate.getFullYear();\r\n        }\r\n    }\r\n\r\n    // Less than ideal way of turning server data into a structure more suitable for\r\n    // iteration into recharts.\r\n    processData() {\r\n        const data = this.state.data[0]\r\n\r\n        let recent = data.daily_labels.map((date, j) => {\r\n            return {\r\n                name: this.formatDate(date),\r\n                balance: data.daily_values[j],\r\n                amt: data.daily_values[j],\r\n            }\r\n        });\r\n\r\n        let monthly = data.month_labels.map((month, j) => {\r\n            return {\r\n                name: month,\r\n                average: data.month_average_values[j],\r\n                amt: data.month_average_values[j],\r\n            }\r\n        });\r\n\r\n        let daily = data.day_of_week_labels.map((day, j) => {\r\n            return {\r\n                name: day,\r\n                daily_average: data.day_of_week_average_values[j],\r\n                amt: data.day_of_week_average_values[j],\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            recent: recent,\r\n            monthly: monthly,\r\n            daily: daily\r\n        });\r\n    }\r\n\r\n    // Tab selection for Recent, Daily, Monthly.\r\n    handleChange(e, newValue) {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    }\r\n\r\n    renderRecent() {\r\n        return(\r\n            <ResponsiveContainer width=\"100%\" height={500}>\r\n                <LineChart data={this.state.recent}\r\n                margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis dy={-5}/>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#dfdad8\" />\r\n                    <Tooltip />\r\n                    <Line type=\"monotone\" dataKey=\"balance\" stroke=\"#5f8a82\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n\r\n    renderDaily() {\r\n        return(\r\n            <ResponsiveContainer width=\"100%\" height={500}>\r\n                <ComposedChart width={730} height={250} data={this.state.daily}>\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis dy={5}/>\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <CartesianGrid stroke=\"#dfdad8\" />\r\n                    <Bar dataKey=\"daily_average\" barSize={20} fill=\"#5f8a82\" />\r\n                </ComposedChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n\r\n    renderMonthly() {\r\n        return(\r\n            <ResponsiveContainer width=\"100%\" height={500}>\r\n                <AreaChart data={this.state.monthly}\r\n                margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\r\n                    <defs>\r\n                        <linearGradient id=\"average\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"5%\" stopColor=\"#5f8a82\" stopOpacity={0.8}/>\r\n                        <stop offset=\"95%\" stopColor=\"#e4f1ee\" stopOpacity={0.4}/>\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis dy={-5}/>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <Tooltip />\r\n                    <Area type=\"monotone\" dataKey=\"average\" stroke=\"#537871\" fillOpacity={1} fill=\"url(#average)\" />\r\n                </AreaChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n\r\n    renderTabs() {\r\n        return(\r\n            <Paper>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={this.state.value}\r\n                        onChange={this.handleChange}\r\n                        variant=\"fullWidth\"\r\n                    >\r\n                        <Tab label=\"Recent\" />\r\n                        <Tab label=\"Daily\" />\r\n                        <Tab label=\"Monthly\" />\r\n                    </Tabs>\r\n                </AppBar>\r\n                {this.state.value === 0 && this.renderRecent()}\r\n                {this.state.value === 1 && this.renderDaily()}\r\n                {this.state.value === 2 && this.renderMonthly()}\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Grid item xs={12}>\r\n                {this.renderTabs()}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Balances;\r\n","import React, { Component } from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { TableBody, TableFooter } from '@material-ui/core';\r\n\r\nclass Transactions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            trxs: this.props.trxs,\r\n            rowsPerPage: 10,\r\n            emptyRows: 0,\r\n            page: 0,\r\n            count: this.props.trxs_count.transaction.TOTAL.count\r\n        };\r\n\r\n        this.handleChangePage = this.handleChangePage.bind(this);\r\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n    }\r\n\r\n    handleChangePage(e, newPage) {\r\n        // Updates current page state to user requested page from table actions\r\n        this.setState({\r\n            page: newPage\r\n        });\r\n    }\r\n\r\n    handleChangeRowsPerPage(e) {\r\n        // Updates current rowsPerPage state with user selected option from table actions\r\n        this.setState({\r\n            rowsPerPage: parseInt(e.target.value, 10)\r\n        });\r\n    }\r\n\r\n    formatDate(date) {\r\n        let formattedDate = new Date(date);\r\n        if (!isNaN(formattedDate.getTime())) {\r\n            let m = formattedDate.getMonth() + 1;\r\n            let month = m < 10 ? '0'+m : m;\r\n\r\n            let d = formattedDate.getDate();\r\n            let day = d < 10 ? '0'+d : d;\r\n            return month + '/' + day + '/' + formattedDate.getFullYear();\r\n        }\r\n    }\r\n\r\n    // Renders transaction table and rows.\r\n    trxsTable() {\r\n        const trxs = this.state.trxs.transaction;\r\n        const emptyRows = this.state.rowsPerPage - Math.min(this.state.rowsPerPage,\r\n            this.state.count - this.state.page * this.state.rowsPerPage);\r\n\r\n        const trxRows = trxs.slice(this.state.page * this.state.rowsPerPage,\r\n            this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((trx) =>\r\n            <TableRow key={trx.id} hover>\r\n                <TableCell align=\"left\">{this.formatDate(trx.date)}</TableCell>\r\n                <TableCell align=\"left\">{trx.category}</TableCell>\r\n                <TableCell align=\"left\">{trx.baseType}</TableCell>\r\n                <TableCell align=\"right\">{\r\n                        trx.amount.currency === \"USD\" ? '$' : ''\r\n                    }\r\n                    {trx.amount.amount}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {trx.runningBalance.amount < 0 ? `-$${Math.abs(trx.runningBalance.amount)}` : `$${trx.runningBalance.amount}` }\r\n                </TableCell>\r\n            </TableRow>\r\n        );\r\n        return (\r\n            <Table style={{ width: \"100%\"}}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Date</TableCell>\r\n                        <TableCell align=\"left\">Description</TableCell>\r\n                        <TableCell align=\"left\">Type</TableCell>\r\n                        <TableCell align=\"right\">Amount</TableCell>\r\n                        <TableCell align=\"right\">Balance</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {trxRows}\r\n                    {/* Why: To stop tables from resizing when there are not enough rows.\r\n\r\n                        If there are not enough rows of data to fill out the the table, this\r\n                        block will pad the rest of the table with empty cells.\r\n                    */\r\n                        emptyRows > 0 && (\r\n                        <TableRow style={{ height: 48 * emptyRows }}>\r\n                            <TableCell/>\r\n                        </TableRow>\r\n                    )}\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 50]}\r\n                            count={this.state.count}\r\n                            rowsPerPage={this.state.rowsPerPage}\r\n                            page={this.state.page}\r\n                            SelectProps={{\r\n                                inputProps: {'aria-label': \"Rows per page\"},\r\n                                native: true,\r\n                            }}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs={12}>\r\n                <Paper style={{overflowX: \"auto\"}}>\r\n                    {this.trxsTable()}\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Transactions;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport AccountList from '../Accounts/AccountList';\nimport Accounts from '../Accounts/Accounts';\nimport Balances from '../Balances/Balances';\nimport Transactions from '../Transactions/Transactions';\n\nimport Grid from '@material-ui/core/Grid';\nimport { createMuiTheme } from '@material-ui/core';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\n// App.js is the entrypoint for the app, loads all the data required to render business owner's dashboard\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: null,\n            isLoading: false,\n            error: \"\",\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: true\n        });\n\n        // AJAX call to provide dashboard components with expected data\n        fetch('/data.json')\n            .then(resp => {\n                if (resp.ok) {\n                    return resp.json();\n                } else {\n                    throw new Error(\"Something went wrong...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n                this.setState({\n                    data: data,\n                    isLoading: false\n                });\n            })\n            .catch(err => {\n                // console.error(err);\n                this.setState({\n                    error: err,\n                    isLoading: false\n                });\n            })\n    }\n\n    renderError() {\n        return (\n            <p>Error</p>\n        );\n    }\n\n    renderApp() {\n        const data = this.state.data;\n\n        const theme = createMuiTheme({\n            palette: {\n                primary: {\n                    main: \"#f66652\",\n                },\n                secondary: {\n                    main: \"#537871\",\n                },\n                stroke: {\n                    main: \"#dfdad8\",\n                },\n                background: {\n                    main: \"#fff\",\n                },\n                events: {\n                    successColor: \"#A7C958\",\n                    warningColor: \"#f66652\",\n                    warningLight: \"#f77c6b\",\n                    weak: \"#F57A23\",\n                    moderate: \"#F5A623\",\n                    good: \"#FDEB00\",\n                    strong: \"#89DE55\",\n                }\n            },\n            typography: {\n                fontColorLight: \"#fff\",\n                fontColorLightened: \"#898b96\",\n                fontWeightHeavy: 700,\n                fontWeightNormal: 400,\n                fontWeightLight: 200,\n                fontFamily: \"Apercu, sans-serif\",\n            }\n        });\n\n        const fakeAccounts = {\n            \"account\": [\n                {\n                    \"includeInNetWorth\": true,\n                    \"accountName\": \"World Bank\",\n                    \"currentBalance\": {\n                        \"amount\": 192.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountType\": \"CHECKING\",\n                    \"isManual\": false,\n                    \"displayedName\": \"SAM SMITH\",\n                    \"accountNumber\": \"xxxx1234\",\n                    \"availableBalance\": {\n                        \"amount\": -7925.89,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountStatus\": \"ACTIVE\",\n                    \"lastUpdated\": \"2019-06-05T23:09:24Z\",\n                    \"isAsset\": true,\n                    \"createdDate\": \"2017-03-02T23:09:24Z\",\n                    \"balance\": {\n                        \"amount\": 192.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"providerId\": \"00001\",\n                    \"providerAccountId\": 10000000,\n                    \"CONTAINER\": \"bank\",\n                    \"id\": 10001\n                },\n                {\n                    \"includeInNetWorth\": true,\n                    \"accountName\": \"Late Bank\",\n                    \"currentBalance\": {\n                        \"amount\": 1192.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountType\": \"CHECKING\",\n                    \"isManual\": false,\n                    \"displayedName\": \"DAVID LETTERMAN\",\n                    \"accountNumber\": \"xxxx5678\",\n                    \"availableBalance\": {\n                        \"amount\": 9925.89,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountStatus\": \"ACTIVE\",\n                    \"lastUpdated\": \"2019-02-12T21:09:24Z\",\n                    \"isAsset\": true,\n                    \"createdDate\": \"2018-04-24T23:09:24Z\",\n                    \"balance\": {\n                        \"amount\": 192.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"providerId\": \"00001\",\n                    \"providerAccountId\": 10000000,\n                    \"CONTAINER\": \"bank\",\n                    \"id\": 10001\n                },\n                {\n                    \"includeInNetWorth\": true,\n                    \"accountName\": \"City Bank\",\n                    \"currentBalance\": {\n                        \"amount\": 492.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountType\": \"CHECKING\",\n                    \"isManual\": false,\n                    \"displayedName\": \"JANE DOE\",\n                    \"accountNumber\": \"xxxx9101\",\n                    \"availableBalance\": {\n                        \"amount\": 2925.89,\n                        \"currency\": \"USD\"\n                    },\n                    \"accountStatus\": \"ACTIVE\",\n                    \"lastUpdated\": \"2019-05-05T04:09:24Z\",\n                    \"isAsset\": true,\n                    \"createdDate\": \"2019-06-05T23:09:24Z\",\n                    \"balance\": {\n                        \"amount\": 192.79,\n                        \"currency\": \"USD\"\n                    },\n                    \"providerId\": \"00001\",\n                    \"providerAccountId\": 10000000,\n                    \"CONTAINER\": \"bank\",\n                    \"id\": 10001\n                }\n            ]\n        }\n\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Grid container spacing={2}>\n                    <AccountList accounts={data.accounts} fakeAccounts={fakeAccounts} />\n                    <Accounts accounts={data.accounts} />\n                    <Balances daily={data.balances} />\n                    <Transactions \n                        trxs={data.trxs}\n                        trxs_count={data.trxs_count}\n                    />\n                </Grid>\n            </MuiThemeProvider>\n        );\n    }\n\n    // If the expected data exists, render it, otherwise render some kind of error.\n    render() {\n        return (\n            <div className=\"App\">\n                {this.state.data ? this.renderApp() : this.renderError()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}