{"version":3,"sources":["Components/Timer/Timer.js","Components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Timer","game","useState","time","setTime","timeStr","setTimeStr","padNum","n","nString","toFixed","length","useEffect","interval","setInterval","seconds","minutes","parseInt","hours","totalTime","clearInterval","className","id","Game","props","intervalID","state","gameActive","gameOver","playerWidth","playerHeight","playerX","playerY","playerSpeedX","playerSpeedY","obstacles","handleClick","bind","handleKeyPress","this","drawStart","drawTutorial","canvas","document","getElementById","obstacleArr","refs","getContext","push","addObstacle","setState","forEach","o","x","width","obstacleW","obstacleSpeedX","y","height","obstacleSpeedY","dimensions","Math","random","obstacleH","ctx","clearRect","updateObstacles","collision","fillRect","fillStyle","font","textAlign","fillText","draw","score","innerHTML","alert","startGame","flag","px","py","ox","floor","oy","od","endGame","collisionWithObstacle","e","preventDefault","key","undefined","touches","clientX","clientY","updatePlayer","Fragment","ref","tabIndex","onClick","nativeEvent","onKeyDown","onTouchStart","Component","App","minDeviceWidth","maxDeviceWidth","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e529c44f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer( {game} ) {\r\n  const [time, setTime] = useState(0);\r\n  const [timeStr, setTimeStr] = useState(\"00:00:00\");\r\n\r\n  function reset() {\r\n    setTime(0);\r\n    setTimeStr(0);\r\n  }\r\n\r\n  // Pads n to a length of 2\r\n  function padNum(n) {\r\n    let nString = n.toFixed(0) + \"\";\r\n    return nString.length < 2 ? \"0\" + nString : nString;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (game) {\r\n      interval = setInterval(() => {\r\n        let seconds = padNum(time % 60);\r\n        let minutes = padNum(parseInt(time / 60));\r\n        let hours = padNum(parseInt(minutes / 60));;\r\n\r\n        let totalTime = `${hours}:${minutes}:${seconds}`; \r\n\r\n        setTime(time => time + 1);\r\n        setTimeStr(timeStr => totalTime);\r\n      }, 1000);\r\n    } else if (!game && time !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [time]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {game ? <div className=\"timer\" id=\"timer\">{timeStr}</div> : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport './Game.scss';\r\n\r\nimport Timer from '../Timer/Timer.js'\r\n\r\n\r\nclass Game extends Component {\r\n  intervalID =  0;\r\n  constructor(props){\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n  state = {\r\n    gameActive: false,\r\n    gameOver: false,\r\n    playerWidth: 20,\r\n    playerHeight: 20,\r\n    playerX: 0,\r\n    playerY: 0,\r\n    playerSpeedX: 0,\r\n    playerSpeedY: 0,\r\n    obstacles: [],\r\n    time: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drawStart();\r\n    this.drawTutorial();\r\n  }\r\n\r\n  updateObstacles() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n    \r\n    let obstacleArr = this.state.obstacles;\r\n    if((this.state.time % 10000) == 5000) {\r\n      obstacleArr.push(this.addObstacle());\r\n      this.setState({\r\n        obstacles: obstacleArr\r\n      });\r\n    } else {\r\n      // No need to add obstacles.\r\n      obstacleArr.forEach(o => {\r\n      //  this.state.playerX >= canvas.width - 20 || this.state.playerX <= 0\r\n      //|| this.state.playerY >= canvas.height - 20 || this.state.playerY <= 0\r\n        if(o.x >= canvas.width - o.obstacleW) {\r\n          o.obstacleSpeedX = -1;\r\n        }\r\n        if(o.x <= 5) {\r\n          o.obstacleSpeedX = 1;\r\n        }\r\n        if(o.y >= canvas.height) {\r\n          o.obstacleSpeedY = -1;\r\n        }\r\n        if(o.y <= 0) {\r\n          o.obstacleSpeedY = 1;\r\n        }\r\n        o.x += o.obstacleSpeedX;\r\n        o.y += o.obstacleSpeedY;\r\n      });\r\n    }\r\n  }\r\n\r\n  addObstacle() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n    let dimensions = (Math.random() * 50) + 20;\r\n    let obstacle = {\r\n      x: ((Math.random() * canvas.width / 2) + canvas.width / 2) - this.state.playerX,\r\n      y: ((Math.random() * canvas.height / 2) + canvas.height / 2) - this.state.playerX,\r\n      obstacleW: dimensions,\r\n      obstacleH: dimensions,\r\n      obstacleSpeedX: (Math.random() * 2) - 1,\r\n      obstacleSpeedY: (Math.random() * 2) - 1\r\n    }\r\n\r\n    return obstacle;\r\n  }\r\n\r\n  draw() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n\r\n    this.setState({\r\n      playerX: this.state.playerX + this.state.playerSpeedX,\r\n      playerY: this.state.playerY + this.state.playerSpeedY,\r\n    })\r\n\r\n    this.updateObstacles();\r\n\r\n    if(this.collision()) {\r\n      // Kill player, end game\r\n    } else {\r\n      // Player is still alive\r\n    }\r\n\r\n    let x = this.state.playerX;\r\n    let y = this.state.playerY;\r\n    ctx.fillRect(x, y, this.state.playerWidth, this.state.playerHeight);\r\n\r\n    this.state.obstacles.forEach(o => {\r\n      ctx.fillRect(o.x, o.y, o.obstacleW, o.obstacleH);\r\n    })\r\n  }\r\n\r\n  drawStart() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(canvas.width / 2 - this.state.playerWidth / 2, canvas.height/2 - this.state.playerHeight / 2,\r\n      this.state.playerWidth, this.state.playerHeight);\r\n    this.setState({\r\n      playerX: canvas.width / 2 - this.state.playerWidth / 2,\r\n      playerY: canvas.height / 2 - this.state.playerHeight / 2,\r\n      playerSpeedY: 0,\r\n      playerSpeedX: 0,\r\n      gameActive: false,\r\n      gameOver: false,\r\n    })\r\n  }\r\n\r\n  drawTutorial() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n    ctx.font = \"32px Libre Baskerville\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillText(\"WASD to MOVE\", canvas.width/2, canvas.height/2 - 50);\r\n  }\r\n\r\n  startGame() {\r\n    this.intervalID = setInterval(() => {\r\n      this.draw();\r\n      this.setState({\r\n        gameActive: true,\r\n        gameOver: false,\r\n        time: this.state.time + 10\r\n      })\r\n    }, 10);\r\n  }\r\n\r\n  endGame() {\r\n    clearInterval(this.intervalID)\r\n    // Draw try again screen.\r\n    let score = document.getElementById(\"timer\").innerHTML;\r\n    alert(`Game Over\\nTime Survived: ${score}`)\r\n    this.setState({\r\n      obstacles: []\r\n    });\r\n    this.drawStart();\r\n    this.startGame();\r\n  }\r\n\r\n  collisionWithObstacle() {\r\n    let obstacles = this.state.obstacles;\r\n    let flag = false;\r\n\r\n    obstacles.forEach(o => {\r\n      let px = this.state.playerX;\r\n      let py = this.state.playerY;\r\n      let ox = Math.floor(o.x);\r\n      let oy = Math.floor(o.y);\r\n      let od = Math.floor(o.obstacleW);\r\n      if((ox <= px && px <= ox + od) && (oy <= py && py <= oy + od)) {\r\n        flag = true;\r\n      } else {\r\n        flag = false;\r\n      }\r\n    });\r\n    return flag;\r\n  }\r\n\r\n  collision() {\r\n    const canvas = document.getElementById(\"game-canvas\")\r\n    const ctx = this.refs.canvas.getContext(\"2d\");\r\n\r\n    let obstacles = this.state.obstacles;\r\n\r\n    if(this.state.playerX >= canvas.width - 20 || this.state.playerX <= 0\r\n      || this.state.playerY >= canvas.height - 20 || this.state.playerY <= 0) {\r\n      this.endGame();\r\n    } else if (this.collisionWithObstacle()) {\r\n      this.endGame();\r\n      // Collision with obstacle\r\n    } else {\r\n      // No collision\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updatePlayer(e) {\r\n    e.preventDefault();\r\n\r\n    switch(e.key) {\r\n      case \"w\":\r\n      case \"ArrowUp\":\r\n        this.setState({ \r\n          playerSpeedY: -2,\r\n          playerSpeedX: 0\r\n        })\r\n        break;\r\n      case \"a\":\r\n      case \"ArrowLeft\":\r\n        this.setState({ \r\n          playerSpeedY: 0,\r\n          playerSpeedX: -2\r\n        })\r\n        break;\r\n      case \"s\":\r\n      case \"ArrowDown\":\r\n        this.setState({ \r\n          playerSpeedY: 2,\r\n          playerSpeedX: 0\r\n        })\r\n        break;\r\n      case \"d\":\r\n      case \"ArrowRight\":\r\n        this.setState({ \r\n          playerSpeedY: 0,\r\n          playerSpeedX: 2\r\n        })\r\n        break;\r\n      case \"Enter\":\r\n        // Restart game\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    \r\n    if (e.touches === undefined) {\r\n      // do nothing\r\n    }\r\n    else {\r\n      let x = e.touches[0].clientX;\r\n      let y = e.touches[0].clientY;\r\n\r\n      if((x < 150) && (y < 550) && (y > 450)) {\r\n        this.setState({ \r\n          playerSpeedY: 0,\r\n          playerSpeedX: -2\r\n        })\r\n      } else if((x > 150) && (y < 550) && (y > 450)) {\r\n        this.setState({ \r\n          playerSpeedY: 0,\r\n          playerSpeedX: 2\r\n        })\r\n      } else if(y < 400) {\r\n        this.setState({ \r\n          playerSpeedY: -2,\r\n          playerSpeedX: 0\r\n        })\r\n      } else if(y > 400) {\r\n        this.setState({ \r\n          playerSpeedY: 2,\r\n          playerSpeedX: 0\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if(!this.state.gameActive && !this.state.gameOver) {\r\n      // Do nothing\r\n    } else {\r\n      // Game is in progress, update player\r\n      this.updatePlayer(e);\r\n    }\r\n  }\r\n\r\n  handleClick(e) {\r\n    if(!this.state.gameActive) {\r\n      this.startGame();\r\n      this.setState({\r\n        gameActive: true\r\n      })\r\n    } else if (this.state.gameActive && this.state.gameOver) {\r\n      // Handle new game logic calls\r\n    } else {\r\n      // console.log(\"Game is still in progress\")\r\n      // Do nothing\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"wrapper\">\r\n          {this.state.gameActive ? <Timer game={true}/> : <div className=\"timer\">&nbsp;</div>}\r\n        </div>\r\n        <div>\r\n          <canvas width={this.props.width} height={this.props.height} ref=\"canvas\" id=\"game-canvas\" className=\"game-canvas\" tabIndex=\"0\"\r\n          onClick={(e) =>{this.handleClick(e.nativeEvent)}}\r\n          onKeyDown={(e) =>{this.handleKeyPress(e.nativeEvent)}}\r\n          onTouchStart={(e) =>{this.handleKeyPress(e.nativeEvent)}}\r\n          ></canvas>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Game;","import React, { useState } from 'react';\nimport MediaQuery from 'react-responsive';\nimport './App.scss';\n\nimport Game from './Components/Game/Game';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"wrapper\">\n        <h1 className=\"main-title wrapper\">survive</h1>\n      </div>\n      <div className=\"content\">\n        <MediaQuery minDeviceWidth={1224}>\n          <Game width={800} height={800}/>\n        </MediaQuery>\n        <MediaQuery maxDeviceWidth={1224}>\n          <Game width={350} height={567}/>\n        </MediaQuery>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}